pipeline {
    agent any
    environment {
        DOCKER_IMAGE = "dadanyanya/flask_api-backend"
        DOCKER_REGISTRY = "docker.io"
        API_URL = "http://127.0.0.1:5000/ping"
        DEPLOY_HOST = "ubuntu@37.9.53.210"
        DEPLOY_PATH = "/home/app"
    }
    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Test/Lint') {
            steps {
                sh '''
                    apt install flake8
                    flake8  . 
                '''
            }
        }
        stage('Build Docker Image') {
            steps {
                sh '''
                    docker build -t $DOCKER_IMAGE .
                '''
            }
        }
        stage('Docker-Compose up') {
            steps {
                sh '''
                    docker-compose up -d
                '''
            }
        }
        stage('Push to Docker Registry') {
            steps {
                withCredentials([string(credentialsId: '21', variable: 'DOCKER_PASSWORD')]) {
                    sh '''
                        echo "$DOCKER_PASSWORD" | docker login -u dadanyanya --password-stdin
                        docker push $DOCKER_IMAGE
                    '''
                }
            }
        }
        stage('Cleanup After Tests') {
            steps {
                sh '''
                    rm -rf ./*
                    docker stop flask_backend || true
                    docker rm flask_backend || true
                    docker stop postgres_db || true
                    docker rm postgres_db || true
                    docker rmi $DOCKER_IMAGE || true
                    docker rmi postgres:16.1-alpine3.19 || true
                '''
            }
        }

        stage('Deploy to Target Machine') {
            steps {
                sshagent(credentials: ['my-deploy-ssh-key']) {
                    sh """
                        ssh -o StrictHostKeyChecking=no ${DEPLOY_HOST} '
                            echo "--- Connected to ${DEPLOY_HOST} ---"
                            
                            
                            mkdir -p ${DEPLOY_PATH}
                            cd ${DEPLOY_PATH}
                            echo "--- Changed directory to ${DEPLOY_PATH} ---"
                            
                            find . -mindepth 1 -delete
                            git clone https://daniilvs:$GIT_TOKEN@github.com/daniilvs/flask_api.git .
                            
                            
                            docker-compose up -d --remove-orphans
                            echo "--- Application deployed successfully ---"
                            
                    
                            docker image prune -f
                            echo "--- Old Docker images pruned ---"

                            docker build -t $DOCKER_IMAGE .

                            docker-compose up -d
                        '
                    """
                }
            }
        }


    }
    
    // post {
    //     success {
    //         echo "Успешное выполнение, переходим к CD"
    //         build job: 'CD'
    //     }
    // }
}