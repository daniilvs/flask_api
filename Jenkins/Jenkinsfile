pipeline {
    agent any
    environment {
        DOCKER_IMAGE = "dadanyanya/flask_api-backend"
        DOCKER_REGISTRY = "docker.io"
        API_URL = "http://37.9.53.210:5000/ping"
        DEPOLY_USER="ubuntu"
        DEPLOY_HOST = "37.9.53.210"
        DEPLOY_PATH = "/home/${DEPLOY_USER}/app"
    }
    stages {
        stage('Checkout') {
            steps {
                git url: "https://github.com/daniilvs/flask_api.git", branch: "main"
            }
        }
        stage('Build') {
            steps {
                echo "Building image"
                script {
                    docker.build("${DOCKER_IMAGE}:latest")
                }
            }
        }

        stage('Test/Lint') {
            steps {
                echo "Running linter"
                script {
                    docker.image("${DOCKER_IMAGE}:latest").inside('-u root') {
                        sh 'python -m pip install flake8'
                        sh 'flake8  /app '
                        echo "Linting passed!"
                    }
                }
            }
        }

        stage('Push') {
            steps {
                echo "Pushing image"
                script {
                    docker.withRegistry('https://registry.hub.docker.com', 21) {
                        docker.image("${DOCKER_IMAGE_NAME}:latest").push()
                        echo "Docker image pushed to Docker Hub."
                    }
                }
            }
        }
    
        // stage('Docker-Compose up') {
        //     steps {
        //         sh '''
        //             docker-compose up -d
        //         '''
        //     }
        // }
        // stage('Push to Docker Registry') {
        //     steps {
        //         withCredentials([string(credentialsId: '21', variable: 'DOCKER_PASSWORD')]) {
        //             sh '''
        //                 echo "$DOCKER_PASSWORD" | docker login -u dadanyanya --password-stdin
        //                 docker push $DOCKER_IMAGE
        //             '''
        //         }
        //     }
        // }
        // stage('Cleanup After Tests') {
        //     steps {
        //         sh '''
        //             rm -rf ./*
        //             docker stop flask_backend || true
        //             docker rm flask_backend || true
        //             docker stop postgres_db || true
        //             docker rm postgres_db || true
        //             docker rmi $DOCKER_IMAGE || true
        //             docker rmi postgres:16.1-alpine3.19 || true
        //         '''
        //     }
        // }

        stage('Deploy to Target Machine') {
            steps {
                echo "Deploing"
                sshagent(credentials: ['my-deploy-ssh-key']) {
                    sh """
                        ssh -o StrictHostKeyChecking=no ${DEPLOY_USER}@${DEPLOY_HOST} '
                            echo "--- Connected to ${DEPLOY_HOST} ---"
                            
                            
                            mkdir -p ${DEPLOY_PATH}
                            cd ${DEPLOY_PATH}
                            echo "--- Changed directory to ${DEPLOY_PATH} ---"
                            
                            git clone https://github.com/daniilvs/flask_api.git .
                            
                            docker pull ${DOCKER_IMAGE}:latest
                            docker-compose up -d --remove-orphans
                            echo "--- Application deployed successfully ---"
                        '
                    """
                }
            }
        }


    }
    
    // post {
    //     success {
    //         echo "Успешное выполнение, переходим к CD"
    //         build job: 'CD'
    //     }
    // }
}
